// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Gender {
    MALE
    FEMALE
}

enum Status {
    PENDING
    PAID
    CANCELLED
}

enum EventCategory {
    ENTERTAINMENT
    SPORTS
    EDUCATION
}

model Organizer {
    id            String   @id
    organizerName String   @unique // NOTE:  organzier can't have the same name
    isOrg         Boolean  @default(true)
    accountActive Boolean  @default(false)
    email         String   @unique // NOTE:  organzier can't have the same email
    password      String
    domain        String
    imgUrl        String?  @db.LongText
    createdAt     DateTime @default(now())
    Event         Event[] // NOTE:  organizer can create many events
    Promo         Promo[] // NOTE:  organizer can create many promos
}

model User {
    id            String     @id
    isOrg         Boolean    @default(false)
    accountActive Boolean    @default(false)
    username      String     @unique // NOTE:  each username is different
    email         String     @unique //  NOTE:  each email is different
    password      String
    gender        Gender
    dob           DateTime?
    domain        String
    usedReferral  Boolean    @default(false)
    referralCode  String     @unique
    imgUrl        String?    @db.LongText
    createdAt     DateTime   @default(now())
    Balance       Balance[] // NOTE:  user can have multiple balance
    Review        Review[] //  NOTE:  user can write many reviews
    Wishlist      Wishlist[]
}

model Event {
    id             String           @id
    organizerID    String
    organizer      Organizer        @relation(fields: [organizerID], references: [id])
    isActive       Boolean          @default(false)
    eventName      String
    category       EventCategory
    location       String
    date           DateTime
    details        String           @db.LongText
    availableSeats Int
    thumbnailUrl   String?          @db.LongText
    createdAt      DateTime         @default(now())
    Review         Review[]
    Wishlist       Wishlist[]
    EventTypePrice EventTypePrice[]
    EventMedia     EventMedia[]
    promoID        String? // optional promo
    promo          Promo?           @relation(fields: [promoID], references: [id])
}

model Promo {
    id               String             @id
    organizerID      String
    organizer        Organizer          @relation(fields: [organizerID], references: [id])
    events           Event[] // event that is associated with the promo
    isAny            Boolean            @default(true)
    promoName        String
    details          String             @db.LongText
    discount         Int
    imgUrl           String             @db.LongText
    expireAt         DateTime
    startAt          DateTime
    issuedAt         DateTime           @default(now())
    TransactionPromo TransactionPromo[]
}

model EventMedia {
    id      String @id
    url     String @db.LongText
    eventID String
    event   Event  @relation(fields: [eventID], references: [id])
}

model EventTypePrice {
    id        String @id
    eventType String
    price     Int
    eventID   String
    event     Event  @relation(fields: [eventID], references: [id])
}

model Balance {
    id       String    @id
    userID   String
    user     User      @relation(fields: [userID], references: [id])
    balance  BigInt
    expireAt DateTime?
    issuedAt DateTime  @default(now())
}

model Transaction {
    id               String             @id
    eventID          String
    userID           String
    seatsOrdered     Int
    totalDiscount    Int
    status           Status
    paymentDue       DateTime
    total            BigInt
    createdAt        DateTime           @default(now())
    TransactionPromo TransactionPromo[]
}

model Wishlist {
    id      Int    @id @default(autoincrement())
    eventID String
    userID  String
    event   Event  @relation(fields: [eventID], references: [id])
    user    User   @relation(fields: [userID], references: [id])
}

model Review {
    id        Int      @id @default(autoincrement())
    userID    String
    eventID   String
    user      User     @relation(fields: [userID], references: [id])
    event     Event    @relation(fields: [eventID], references: [id])
    desc      String   @db.LongText
    rating    Int
    createdAt DateTime @default(now())
}

model TransactionPromo {
    id            String      @id
    transactionID String
    promoID       String
    transaction   Transaction @relation(fields: [transactionID], references: [id])
    promo         Promo       @relation(fields: [promoID], references: [id])
}
